Q. The Nautilus Application development team has finished development of one of the applications and it is ready for deployment. 
   It is a guestbook application that will be used to manage entries for guests/visitors. As per discussion with the DevOps team, 
   they have finalized the infrastructure that will be deployed on Kubernetes cluster. Below you can find more details about it.
   BACK-END TIER
   Create a deployment named redis-master for Redis master.
   a.) Replicas count should be 1.
   b.) Container name should be master-redis-datacenter and it should use image redis.
   c.) Request resources as CPU should be 100m and Memory should be 100Mi.
   d.) Container port should be redis default port i.e 6379.
   Create a service named redis-master for Redis master. Port and targetPort should be Redis default port i.e 6379.
   Create another deployment named redis-slave for Redis slave.
   a.) Replicas count should be 2.
   b.) Container name should be slave-redis-datacenter and it should use gcr.io/google_samples/gb-redisslave:v3 image.
   c.) Requests resources as CPU should be 100m and Memory should be 100Mi.
   d.) Define an environment variable named GET_HOSTS_FROM and its value should be dns.
   e.) Container port should be Redis default port i.e 6379.
   Create another service named redis-slave. It should use Redis default port i.e 6379.
   FRONT END TIER
   Create a deployment named frontend.
   a.) Replicas count should be 3.
   b.) Container name should be php-redis-datacenter and it should use gcr.io/google-samples/gb-frontend@sha256:cbc8ef4b0a2d0b95965e0e7dc8938c270ea98e34ec9d60ea64b2d5f2df2dfbbf image.
   c.) Request resources as CPU should be 100m and Memory should be 100Mi.
   d.) Define an environment variable named as GET_HOSTS_FROM and its value should be dns.
   e.) Container port should be 80.
   Create a service named frontend. Its type should be NodePort, port should be 80 and its nodePort should be 30009.
   Finally, you can check the guestbook app by clicking on App button.

Sol. 1. Create RedisMaster manifest
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-master
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      role: master
  template:
    metadata:
      labels:
        app: redis
        role: master
    spec:
      containers:
      - name: master-redis-datacenter
        image: redis
        resources:
          requests:
            cpu: "100m"
            memory: "100Mi"
        ports:
        - containerPort: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: redis-master
spec:
  selector:
    app: redis
    role: master
  ports:
  - port: 6379
    targetPort: 6379

  2. Create RedisSlave Manifest
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-slave
spec:
  replicas: 2
  selector:
    matchLabels:
      app: redis
      role: slave
  template:
    metadata:
      labels:
        app: redis
        role: slave
    spec:
      containers:
      - name: slave-redis-datacenter
        image: gcr.io/google_samples/gb-redisslave:v3
        resources:
          requests:
            cpu: "100m"
            memory: "100Mi"
        env:
        - name: GET_HOSTS_FROM
          value: dns
        ports:
        - containerPort: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: redis-slave
spec:
  selector:
    app: redis
    role: slave
  ports:
  - port: 6379
    targetPort: 6379

   3. Create Frontend Manifest
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: php-redis-datacenter
        image: gcr.io/google-samples/gb-frontend@sha256:cbc8ef4b0a2d0b95965e0e7dc8938c270ea98e34ec9d60ea64b2d5f2df2dfbbf
        resources:
          requests:
            cpu: "100m"
            memory: "100Mi"
        env:
        - name: GET_HOSTS_FROM
          value: dns
        ports:
        - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: NodePort
  selector:
    app: frontend
  ports:
  - port: 80
    nodePort: 30009

  4. Apply all the manifest
       - kubectl apply -f RedisMaster.yaml
       - kubectl apply -f RedisSlave.yaml
       - kubectl apply -f Frontend.yaml
You can use any labels as per your choice.
